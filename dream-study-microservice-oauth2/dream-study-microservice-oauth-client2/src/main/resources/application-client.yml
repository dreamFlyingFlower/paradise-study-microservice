spring:
  thymeleaf:
    cache: false

  security:
    # 进行登录验证的用户名和密码,由用户自行输入
    user:
      name: admin
      # 123456
      password: $2a$10$vN5dYR542V03tOvLs4ep6.W8MAMBUqm2feSGxxOLZKoGKPumM.w0y
    oauth2:
      resourceserver:
        jwt:
          # 认证服务器解析token令牌的密钥地址
          jwk-set-uri: http://127.0.0.1:55100/oauthServer/oauth/token_key
      client:
        # 认证服务器信息,可写多个
        provider:
          # 认证服务器ID,可自定义,不可重复
          oauth-server: 
            # 认证服务器授权地址
            authorization-uri: http://127.0.0.1:17127/oauthServer/oauth2/oauthrize
            # 认证服务器获取token地址
            token-uri: http://127.0.0.1:17127/oauthServer/oauth2/token
            # OIDC或OAuth2令牌发布地址,即认证服务器地址
            issuer-uri: http://127.0.0.1:17127
            # 自定义获取用户信息的地址,默认访问认证服务器的/userinfo端点,但是认证服务器需要开启IdToken获取,为避免麻烦自定一个用户信息接口
            user-info-uri: ${spring.security.oauth2.client.provider.oauth-server.issuer-uri}/user
            jwk-set-uri: 用于从授权服务器检索JSON Web密钥(JWK)集的URI,其中包含用于验证ID令牌的JSON Web签名(JWS)和可选的UserInfo响应的加密密钥
            user-info-authentication-method: 
            user-name-attribute: 
            # 以下属性高版本才可用
            #configurationMetadata: OpenID提供者配置信息,仅当属性spring.security.oauth2.client.[providerId].issur-uri可用时,此信息才可用
            # 用户信息接口
            #user-info-endpont: 
              #uri: UserInfo端点URI,用于访问经过身份验证的最终用户的声明和属性
              #authenticationMethod: 向UserInfo端点发送访问令牌时使用的身份验证方法,支持的值包括标头、窗体和查询,参考AuthenticationMethod
              #userNameAttributeName: UserInfo响应中返回的属性的名称,该属性引用最终用户的名称或标识符
        # 当前客户端注册到不同认证服务器的信息,由认证服务器颁发
        registration:
          # 本应用注册在facebook的参数,系统已经内置,其他参数可不写
#          facebook: 
#            client-id: facebook_client_id
#            client-secret: facebook_client_secret
          # 本应用注册在github上的参数,系统已经内置,其他参数可不写
#          github:
#            client-id: github_client_id
#            client-secret: github_client_secret
          oauth-server-client-code: 
            # 认证服务器ID,需要和spring.security.oauth2.client.provider下的key对应
            provider: oauth-server
            # 客户端名称
            client-name: guest
            # 认证服务器发放的客户端ID和客户端密钥
            client-id: guest
            client-secret: guest
            # 客户端认证方式,详见org.springframework.security.oauth2.core.ClientAuthenticationMethod
            client-authentication-method: client_secret_basic
            # 获取令牌的授权模式
            authorization-grant-type: authorization_code
            # 客户端接收授权码的回调地址
            redirect-uri: http://127.0.0.1:55300/oauthClient/authorized
            # 客户端接收授权码的回调地址,SpringSecurityClient默认实现使用code换取token的接口
            #redirect-uri: http://127.0.0.1:55300/login/oauth2/code/messaging-client-oidc
            scope: message.read, message.write
          oauth-server-client-credentials:
            provider: oauth-server
            client-name: guest
            client-id: guest
            client-secret: guest
            authorization-grant-type: client_credentials
            scope: message.read, message.write
          oauth-server-client-password:
            provider: oauth-server
            client-name: guest
            client-id: guest
            client-secret: guest
            authorization-grant-type: password
            scope: message.read, message.write
          oauth2-client-implicit:
            provider: oauth-server
            client-name: guest
            client-id: guest
            client-secret: guest
            authorization-grant-type: implicit
            redirect-uri: http://localhost:55300/oauthClient/authorized
            scope: message.read, message.write