<?xml version="1.0" encoding="UTF-8"?>
<!-- debug:当设置为true时,将打印出logback内部日志,实时查看logback运行状态.默认为false -->
<!-- scan:当设置为true时,配置文档如果发生改变,将会被重新加载,默认为true -->
<!-- scanPeriod:当scan为true时,此属性生效,设置检测配置文档修改的时间间隔,默认时间爱单位是毫秒.默认的时间间隔为1分钟 -->
<configuration debug="true" scan="true" scanPeriod="60 seconds">
	<!-- 通用参数 -->
	<!--<include resource="org/springframework/boot/logging/logback/base.xml" /> -->

	<!-- 日志文件输出格式: -->
	<!-- %-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n:日志输出时间 -->
	<!-- %d{HH: mm:ss.SSS}:日志输出时间 -->
	<!-- %thread:输出日志的进程名字 -->
	<!-- %-5level:日志级别,并且使用5个字符靠左对齐 -->
	<!-- %logger{36}:日志输出者的名字 -->
	<!-- %msg:日志消息 -->
	<!-- %n:平台的换行符 -->
	<property name="log.path" value="logs" />
	<property name="log.pattern"
		value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n" />

	<!-- 日志过滤器: -->
	<!-- ThresholdFilter:临界值过滤器.当日志级别等于或高于临界值时,过滤器返回NEUTRAL;当级别低于临界值时,日志会被拒绝 -->
	<!-- LevelFilter:级别过滤器.如果日志级别等于配置级别,过滤器会根据onMath和onMismatch接收或拒绝日志 -->
	<!-- <level>:设置过滤级别 -->
	<!-- <onMatch>:用于配置符合过滤条件的操作:DENY,ACCEPT,NEUTRAL -->
	<!-- <onMismatch>:用于配置不符合过滤条件的操作:DENY,ACCEPT,NEUTRAL -->

	<!-- 输出到控制台的日志 -->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>${log.pattern}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>DEBUG</level>
		</filter>
	</appender>

	<!-- level为DEBUG日志,时间滚动输出 -->
	<appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文档的路径及文档名 -->
		<file>${log.path}/debug.log</file>
		<!--日志文档输出格式 -->
		<encoder>
			<pattern>${log.pattern}</pattern>
			<!-- 设置字符集 -->
			<charset>UTF-8</charset>
		</encoder>
		<!-- 日志记录器的滚动策略,按日期,按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 日志归档 -->
			<!-- 如果第二天输出日志,会将当天的日志记录在<file>${log.path}/log_debug.log</file>,然后将昨天的日志归档到下面的文件中 -->
			<!-- 以分钟切分 %d{yyyy-MM-dd_HH-mm} -->
			<fileNamePattern>${log.path}/debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- 单个日志文件最大100M,超过该值就会再创建一个日志文件,日志文件的名字最后+1 -->
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--日志文档保留天数 -->
			<maxHistory>15</maxHistory>
			<!-- 所有的日志文件最大20G,超过就会删除旧的日志 -->
			<!-- <totalSizeCap>20GB</totalSizeCap> -->
		</rollingPolicy>
		<!-- 此日志文档只记录debug级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>debug</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- level为INFO日志,时间滚动输出 -->
	<appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.path}/info.log</file>
		<encoder>
			<pattern>${log.pattern}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/info-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- level为WARN日志,时间滚动输出 -->
	<appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.path}/warn.log</file>
		<encoder>
			<pattern>${log.pattern}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/warn-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>warn</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- level为ERROR日志,时间滚动输出 -->
	<appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.path}/error.log</file>
		<encoder>
			<pattern>${log.pattern}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/error-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 所有高于DEBUG的日志,记录到一个文件 -->
	<appender name="ALL_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.path}/all.log</file>
		<encoder>
			<pattern>${log.pattern}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/all-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>DENY</onMatch>
			<onMismatch>ACCEPT</onMismatch>
		</filter>
	</appender>

	<!-- root:必须在appender下,对所有appender进行管理,添加哪个appender就会打印哪个appender的日志 -->
	<!-- level:总日志级别控制,设置最低日志级别限制.如果appender的日志级别比root的高,则按照appender的日志级别打印日志; -->
	<!-- 如果appender的日志级别比root的低,则按照root设定的日志级别进行打印日志 -->
	<root level="INFO">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="DEBUG_FILE" />
		<appender-ref ref="INFO_FILE" />
		<appender-ref ref="WARN_FILE" />
		<appender-ref ref="ERROR_FILE" />
	</root>

	<!-- 不同环境配置不同的日志级别 -->
	<!-- 开发环境日志级别 -->
	<springProfile name="dev">
		<!-- 基本策略:默认日志级别 -->
		<root level="INFO">
			<appender-ref ref="CONSOLE" />
			<appender-ref ref="DEBUG_FILE" />
			<appender-ref ref="INFO_FILE" />
			<appender-ref ref="WARN_FILE" />
			<appender-ref ref="ERROR_FILE" />
		</root>
		<!-- 定制化日志级别 -->
		<logger name="com.wy" level="DEBUG" />
		<logger name="mapper" level="DEBUG" />
		<logger name="org.springframework" level="INFO" />
	</springProfile>

	<!-- 测试环境日志级别 -->
	<springProfile name="test">
		<root level="DEBUG">
			<appender-ref ref="CONSOLE" />
			<appender-ref ref="DEBUG_FILE" />
			<appender-ref ref="INFO_FILE" />
			<appender-ref ref="WARN_FILE" />
			<appender-ref ref="ERROR_FILE" />
		</root>
		<logger name="com.wy" level="DEBUG" />
		<logger name="mapper" level="DEBUG" />
		<logger name="org.springframework" level="INFO" />
	</springProfile>

	<!-- 生产环境日志级别 -->
	<springProfile name="prod">
		<root level="DEBUG">
			<appender-ref ref="CONSOLE" />
			<appender-ref ref="DEBUG_FILE" />
			<appender-ref ref="INFO_FILE" />
			<appender-ref ref="WARN_FILE" />
			<appender-ref ref="ERROR_FILE" />
		</root>
		<logger name="com.wy" level="DEBUG" />
		<logger name="mapper" level="DEBUG" />
		<logger name="org.springframework" level="INFO" />
	</springProfile>
</configuration>