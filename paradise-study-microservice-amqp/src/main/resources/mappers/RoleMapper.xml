<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wy.model.Role">

	<!-- 当结果集比较复杂的时候,可以自定义另外的结果集 -->
	<!-- type:自定义结果集的实体类,id:当前结果集的标识,在需要使用该结果集的标签中使用 -->
	<!-- 此处属于Role的属性可以使用User中的Role的属性.Role的属性名来赋值 -->
	<!-- 另外两种设置Role的方法,可以使用association,详情见UserMapper.xml -->
	<resultMap type="com.wy.model.User" id="result1">
		<id column="user_id" property="userId" />
		<result column=" " property="username" />
		<result column="role_id" property="role.roleId" />
		<result column="role_name" property="role.roleName" />
	</resultMap>
	<select id="get1" resultMap="reuslt1">
		select a.user_id,a.username,c.role_id,c.role_name from ti_user a
		inner join tr_user_role b on
		a.user_id=b.user_id
		inner join ti_role c on c.role_id = b.role_id
	</select>

	<!-- 动态sql -->
	<!-- 在where标签里的语句会由mybatis自动处理,若多了开头的and,会自动去掉;结尾多的and不会去掉 -->
	<!-- if:判断参数是否符合条件,若符合条件则加上该条件,若不符合则不加上;不是if-else,只判断条件 -->
	<!-- bind:变量绑定,可以在标签内绑定某个表达式作为参数给其他语句使用 -->
	<select id="get2" resultType="com.wy.model.User" parameterType="com.wy.model.User">
		<!-- 直接使用ognl表达式绑定给_username或在传递参数的时候,直接在username前后加上% -->
		<bind name="_username" value="'%'+username+'%'" />
		select * from ti_user
		<where>
			<!-- 使用的OGNL表达式,可参照官方文档.特殊字符需要转移 -->
			<if test="username != null and username !=&quot;&quot; ">username=#{_username}</if>
			<if test="email != null">and email=#{email}</if>
			<if test="tel!=null">and tel=#{tel}</if>
		</where>
		order by user_id
	</select>

	<!-- choose-when-otherwise:类似switch-case,只会有一个生效,otherwise可无,即无默认 -->
	<select id="login" resultType="com.wy.model.User" parameterType="String">
		select * from ti_user
		<where>
			<choose>
				<when test="username != null">and username = #{username}</when>
				<when test="email != null">and email=#{email}</when>
				<when test="tel != null">and tel=#{tel}</when>
				<otherwise> username=#{username}</otherwise>
			</choose>
		</where>
	</select>

	<!-- trim:可将标签之间的内容拼接后的字符串前或后加上某些想要的内容,分别是prefix和suffix属性; -->
	<!-- 同时还可以把标签之间开头或结尾的符合条件的内容覆盖,分别树prefixOverrides和suffixOverrides -->
	<select id="getByCondition1" resultType="com.wy.model.User"
		parameterType="com.wy.model.User">
		select * from ti_user
		<trim prefix="where" prefixOverrides="and|or">
			<if test="username != null">username=#{username}</if>
			<if test="email != null">and email=#{email}</if>
			<if test="tel!=null">and tel=#{tel}</if>
		</trim>
		order by user_id
	</select>

	<!-- set:更新的时候用,动态条件更新;但是更新的内容不能为空,会报错;若是多出逗号会自动忽略 -->
	<update id="updateByCnd" parameterType="com.wy.model.User">
		update ti_user
		<set>
			<if test="username != null">
				username = #{username},
			</if>
			<if test="password != null">
				password = #{password},
			</if>
			<if test="email != null">
				email = #{email}
			</if>
		</set>
		where id = #{id}
	</update>

	<!-- in的用法 -->
	<!-- collection:参数类型,当参数是list的时候,填list;当参数是array的时候填array;当参数是list<T>时,填形参名 -->
	<!-- 当参数不只list或array时,还有其他参数时,可用map,collection中则填map中集合的key值 -->
	<!-- item:每个值迭代时候的别名,可随意定义,是foreach标签之间的值对应; -->
	<!-- open:该语句以什么开始; -->
	<!-- separator:每次迭代之间用什么符号作为分隔符,可逗号,可or等; -->
	<!-- close:表示已什么结束; -->
	<!-- index:自定义.当遍历list时,index是list的索引,item就是值;当遍历map时,index是map的key,item是值 -->
	<delete id="deletes">
		delete from ti_user where user_id in
		<foreach item="userId" collection="array" open="(" separator="," close=")">
			#{userId}
		</foreach>
	</delete>

	<!-- 存储过程调用,statementType必须改为CALLABLE, -->
	<!-- 写法固定:{call 存储过程名(#{Java参数名,mode表示输入输出,即IN或OUT})} -->
	<!-- CURSOR:游标,只有oracle才可以使用,用来封装复杂结果集,resultMap是Java和数据库字段的对应id -->
	<select id="getProducure" statementType="CALLABLE">
		{call pro_name(#{userId,mode=IN,jdbcType=INTEGER},#{username,mode=OUT,jdbcType=VARCHAR},
		#{users,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=resultmapid})}
	</select>

</mapper>