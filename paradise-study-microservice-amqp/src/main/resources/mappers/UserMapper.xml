<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.wy.mapper.UserMapper">

	<!-- $和#的区别:#在拿到值之后是进行预编译,也就是以?为占位符替代参数位置,$则是直接套入参数值 -->

	<!-- 内置参数,可以在if,when等判断条件中直接使用 -->
	<!-- 在if,when等test的条件判断中,0==''判断为true,都会转为double进行比较 -->
	<!-- _parameter:代表整个参数,方法传递的是啥就是啥; -->
	<!-- _databaseId:如果配置了databaseidprovider标签,则代表当前数据库的别名,该标签见mybatis.xml -->

	<!-- 开启当前命名空间二级缓存,默认是开启一级缓存,二级不开启 -->
	<!-- 1级缓存只有当是同一个sqlsessionfactory,同一个select,参数相同时,后面的调用才会走缓存 -->
	<!-- 一级缓存失效:多个sqlsessionfactory调用;查询参数不同;2次查询之间进行了增删改;手动清除了一级缓存 -->
	<!-- 2级缓存,又叫sqlsessionfactory缓存.当有多个sessionfactory时,只要调用的是同命名空间的同方法, -->
	<!-- 且上一个sessionfactory已经关闭,开启了二级缓存的mapper将会把数据刷入到2级缓存中,则仍走缓存 -->
	<!-- 此时缓存的数据将会一直存在缓存中,直到程序终止,或主动清除缓存 -->
	<!-- 只有开启了全局的二级缓存策略,则在本命名空间中开启二级缓存才有效,实体类必须实现Serializable接口 -->
	<!-- eviction:缓存回收策略 -->
	<!-- LRU:默认,最少使用原则,移除最长时间不使用的对象 -->
	<!-- FIFO:先进先出原则,按照对象进入缓存顺序进行回收 -->
	<!-- SOFT:软引用,移除基于垃圾回收器状态和软引用规则的对象 -->
	<!-- WEAK:弱引用,更积极的移除移除基于垃圾回收器状态和弱引用规则的对象 -->
	<!-- flushInterval:刷新时间间隔,单位为毫秒.若不配置,那么只有在进行数据库修改操作才会被动刷新缓存区 -->
	<!-- size:引用额数目,代表缓存最多可以存储的对象个数 -->
	<!-- readOnly:是否只读,如果为TRUE,则所有相同的sql语句返回的是同一个对象,速度快,但并发操作时,可能不安全 -->
	<!-- 默认为false,相同的sql访问的是cache中数据的clone副本,安全,速度慢 -->
	<!-- type:自定义cache的使用方式,比如整个ecache,redis,必须实现org.apache.ibatis.cache.Cache -->
	<cache eviction="LRU" size="1024" readOnly="false" />
	<!-- 其他命名空间的缓存引用 -->
	<!-- <cache-ref></cache-ref> -->

	<!-- useCache:该属性值影响二级缓存.默认是true使用二级缓存,false每次仍然从数据库查询新的数据 -->
	<!-- flushCache:在insert,update,delete中默认true刷新一级,二级缓存,select中默认false不刷新一级,二级缓存 -->
	<!-- sqlsession.clearCache()只是清除当前session的一级缓存 -->
	<select id="getById" resultType="com.wy.model.User" useCache="false" flushCache="true">
		select * from
		goods where
		goods_id = #{value}
	</select>

	<!-- 可根据自己的需求,是否要使用type中的类的映射关系,property是javabean属性,column是对应的数据库字段 -->
	<resultMap type="com.wy.model.User" id="user">
		<result property="userId" column="user_id" />
		<result property="username" column="username" />
		<result property="email" column="email" />
		<result property="createtime" column="createtime" />
		<!-- 单表用association,property是在实体类的属性名,select是Role的xml的查询id,column是参数列 -->
		<association property="role" select="com.wy.mapper.RoleMapper.getByName"
			column="user_id"></association>
		<!-- 集合可以用collection,property是本xml对应实体类的属性名 -->
		<collection property="roles"></collection>
	</resultMap>

	<!-- 参数传递,可以查看{@link org.apache.ibatis.binding.MapperMethod#execute方法} -->
	<!-- 1.单个基本类型参数,参数名可随便写,也可以写0或者param1 -->
	<!-- 2.多个基本参数参数,必须从0,1...一次递增,或者param1,param2...一次递增 -->
	<!-- 3.多个基本参数,可在接口的参数名上添加@Param注解,标明key的值,在xml中仍可使用属性 -->
	<!-- 4.多参数可组成一个实体类或map,参数则必须和实体类中的java属性,map中key相同 -->
	<!-- 5.若是单个基本类型参数,另外一个是实体类或map,则必须2和3结合使用,实体类中用.连接属性 -->
	<!-- 6.在xml中使用java类中的常量或枚举方法,语法为${@path$subClass@Attr.getMethod} -->
	<select id="getById1" resultType="com.wy.model.User">
		<!-- select * from ti_user where user_id = #{id} -->
		<!-- select * from ti_user where user_id =#{0} and username = #{1} -->
		<!-- select * from ti_user where user_id = #{param1} and username = #{param2} -->
		<!-- select * from ti_user where user_id = #{userId} and username = #{username} -->
		<!-- select * from ti_user where user_id = #{param1} and username = #{param2.username} -->
		<!-- select * from ti_user where user_state = '${@com.wy.common.Constant@USER_STATE}' -->
		<!-- and user_type = '${@com.wy.enums.UserType@BOSS.toString()}' -->
	</select>

	<!-- 当参数类型为Collection时,mybatis同样是将参数封装成了一个map. -->
	<!-- 若使用list的第1个元素,不可使用#{0},#{param},只可以使用collection或list,推荐list,而set只能用collection -->
	<!-- 而数组的key则固定是array,访问的时候只能是array[index] -->
	<select id="getByList" parameterType="list" resultType="com.wy.model.User">
		<!-- select * from ti_user where user_id =#{0} and username = #{1} -->
		<!-- select * from ti_user where user_id = #{param1} and username = #{param2} -->
		<!-- select * from ti_user where user_id = #{userId} and username = #{username} -->
		<!-- select * from ti_user where user_id = #{param1} and username = #{param2.username} -->
	</select>

	<!-- 注意:插入操作一直都是返回的影响行数,返回的自增主键的值会直接赋值给实体类中 -->
	<!-- useGeneratedKeys:使用自增主键获取主键策略 -->
	<!-- keyColumn:设置数据表自动生成的主键名,若自动生成的主键不是第一个字段则必须设置 -->
	<!-- keyProperty:指定主键对应的java属性名,用于设置useGeneratedKeys属性或selectKey子元素返回值将赋值到哪个属性中 -->
	<!-- useGeneratedKeys:设置是否使用JDBC的getGenereatedKeys方法获取主键并赋值到keyProperty设置的属性中 -->
	<!-- 该属性适用于自增主键,非自增主键可以使用selectKey来获取 -->
	<!-- statementType:取值范围STATEMENT,PREPARED(默认值),CALLABLE -->
	<insert id="save" parameterType="com.wy.model.User" useGeneratedKeys="true"
		keyProperty="userId">
		insert into goods(`goods_name`,`totol`,`sold`,`surplus`,`create_time`)
		values(#{goodsName},#{totol},#{sold},#{surplus},#{createTime})
	</insert>

	<insert id="save0" parameterType="com.wy.model.User">
		<selectKey keyProperty="userId" order="BEFORE" resultType="java.lang.String">
			select replace(uuid(),'-','')
			from dual
		</selectKey>
		insert into ts_user (user_id, username)
		values (#{userId,jdbcType=VARCHAR},
		#{username,jdbcType=VARCHAR})
	</insert>

	<!-- 使用oracle类似的sequence主键,oracle必须使用before,否则会报错 -->
	<insert id="save1" parameterType="com.wy.model.User" keyProperty="userId">
		<!-- 在执行插入之前查询,可直接使用属性 -->
		<!-- order:在插入之前赋值给主键属性,还是插入之后赋值给主键属性 还是之后运行; -->
		<selectKey order="BEFORE" keyProperty="userId" resultType="Integer">
			<!-- 编写查询主键的sql,直接查询下一个索引的值 -->
			select seq_name.nextval from dual
		</selectKey>
		insert into goods(`user_id`,`username`,`email`) values(#{userId},#{username},#{email})
	</insert>

	<!-- 使用oracle类似的sequence主键,在插入之后查询,此种方法不要用,批量插入会有问题 -->
	<insert id="save2" parameterType="com.wy.model.User" keyProperty="userId">
		<!-- 在执行插入之前查询,可直接使用属性 -->
		<!-- order:在插入之前还是之后运行;keyProperty属性将查询出的值封装给java的某个属性;resultType:查询出的属性类型 -->
		<selectKey order="AFTER" keyProperty="userId" resultType="Integer">
			<!-- 编写查询主键的sql,直接查询下一个索引的值 -->
			select seq_name.currval from dual
		</selectKey>
		insert into goods(`user_id`,`username`,`email`) values(seq_name.nextval,#{username},#{email})
	</insert>

	<!-- 批量新增,参数是list<User> -->
	<!-- oracle不支持mysql的批量保存方式,需要将完整的insert语句放在begin,end;之间,类似存储过程 -->
	<!-- oracle的另外方式是利用中间表,insert into ti_user select ......,但这种方式在某些时候会存在问题 -->
	<insert id="save3">
		insert into ti_user(username,email,role_id) values
		<foreach collection="users" item="item" separator=",">
			(#{item.username},#{item.email},#{item.role.roleId})
		</foreach>
	</insert>

	<!-- oracle批量保存 -->
	<!-- 第一种:类似于存储过程begin insert... end;,注意end后的分号不能掉 -->
	<insert id="save4">
		<foreach collection="users" item="user" open="begin" close="end;">
			insert into
			ti_user(user_id,username,email,role_id)
			values(seq_name.nextval,#{item.username},#{item.email},#{item.role.roleId});
		</foreach>
	</insert>

	<!-- 第二种:类似于存储过程,insert ... select -->
	<insert id="save5">
		<foreach collection="users" item="user" open="begin" close="end;">
			insert into ti_user(user_id,username,email,role_id)
			select seq_name.nextval,username,email,role_id
			from (
			<foreach collection="users" item="user" separator="union">
				select
				#{user.username},#{user.email},#{user.role.role_id} from dual
			</foreach>
			)
		</foreach>
	</insert>

	<!-- 第三种:利用union all -->
	<insert id="save6">
		<foreach collection="users" item="user" open="begin" close="end;">
			insert into ti_user(username,email,role_id)
			<foreach collection="users" item="user" open="(" close=")" separator="union all">
				select
				#{user.username},#{user.email},#{user.role.role_id} from dual
			</foreach>
			)
		</foreach>
	</insert>

	<!-- sql:复用sql片段,可以是字段,choose-when,if;在其他标签中使用include使用sql -->
	<!-- 若是需要使用其他xml中,可指定include的属性refid的值为命名空间.sql标签id -->
	<!-- 在sql中也可以引用在include中自定义的属性,只能用${propname} -->
	<sql id="userColumns">
		user_id,username,password,realname,depart_id,idcard,birthday,age,sex,address,email,salary,tel,state,user_icon,createtime,updatetime,
		#{abs}
	</sql>

	<select id="getByIds" resultType="com.wy.model.User">
		select
		<include refid="userColumns">
			<property name="testName" value="abs" />
		</include>
		from ti_user order by user_id
	</select>

	<!-- 2张表联合查询,2种方法 -->
	<!-- 第一种方法:通过嵌套查询,执行另外一个sql映射语句来返回预期的复杂类型 -->
	<select id="getSingle1" parameterType="int" resultMap="singleUnion1">
		select * from ti_user where user_id =
		#{userId}
	</select>
	<resultMap type="com.wy.model.User" id="singleUnion1">
		<!-- ti_user表的字段 -->
		<id property="userId" column="user_id" />
		<result property="education" column="education" />
		<!-- 其他关联表字段 -->
		<!-- property:user类中关联其他表的属性,column:user中传给userEx的字段,javaType:查询的返回类型 -->
		<!-- select:另一个查询,该查询可以是当前xml中,可以不写namespace,若是其他xml中的,需要写完成的namespace -->
		<association property="userEx" column="user_id" javaType="com.wy.model.UserEx"
			select="getSingleEx1"></association>
	</resultMap>
	<select id="getSingleEx1" parameterType="int" resultType="com.wy.model.UserEx">
		select * from ti_user_ex where
		user_id = #{userId}
	</select>

	<!-- 第二种方法,直接将结果集写在联合的标签内 -->
	<select id="getSingle2" parameterType="int" resultMap="singleUnion2">
		select * from ti_user a inner join
		ti_user_ex b on a.user_id
		= b.user_id where a.user_id =
		#{userId}
	</select>
	<resultMap type="com.wy.model.User" id="singleUnion2">
		<!-- ti_user表的字段 -->
		<id property="userId" column="user_id" />
		<result property="education" column="education" />
		<!-- 其他关联表字段 -->
		<!-- property:user类中关联其他表的字段,column:user中传给userEx的字段,javaType:查询的返回类型,select:另一个查询 -->
		<association property="userEx" column="user_id" javaType="com.wy.model.UserEx"
			select="getSingleEx">
			<id property="userId" column="use_Id" />
			<result property="eduaction" column="education" />
		</association>
	</resultMap>

	<!-- 多表联合查询 -->
	<!-- 第一种:参数和结果集都用map,这样就不需要在实体类中写其他类的属性字段 -->
	<!-- 第二种:该实体类中写入其他需要查询的类的属性字段,同时,mapper.xml中还需要配置其他 -->
	<!-- 1.要在ResultMap标签中使用association属性,同时需要写入一个查询,该查询需要在关联的xml中找到 -->
	<!-- 第三种:需要在本xml中写入需要查询的另外实体类的resultMap标签,其中的主键用id,多主键多id -->
	<select id="getByMulTab"></select>

	<!-- 超过2张表的关联查询,2种方法 -->
	<!-- 第一种方法:通过嵌套查询,执行另外一个sql映射语句来返回预期的复杂类型 -->
	<select id="getMulti1" parameterType="int" resultMap="multiUnion1">
		select * from ti_user where user_id =
		#{userId}
	</select>
	<resultMap type="com.wy.model.User" id="multiUnion1">
		<!-- ti_user表的字段 -->
		<id property="userId" column="user_id" />
		<result property="education" column="education" />
		<!-- 其他关联表字段 -->
		<!-- property:user类中关联其他表的字段,javaType:查询的返回类型,select:另一个查询 -->
		<!-- column:作为条件传给userEx的user中的属性,若是单个属性,可直接写user的属性名; -->
		<!-- 若是多个属性,可以构建一个map,如column="{userId=userId}",key为userEx的java属性名,value为user的属性名 -->
		<association property="userEx" column="user_id" javaType="com.wy.model.UserEx"
			select="getSingleEx2"></association>
		<collection property="roles" ofType="com.wy.model.Role" column="user_id"
			select="getMultiRole"></collection>
	</resultMap>
	<select id="getSingleEx2" parameterType="int" resultType="com.wy.model.UserEx">
		select * from ti_user_ex where
		user_id = #{userId}
	</select>
	<select id="getMultiRole" parameterType="int" resultType="com.wy.model.Role">
		select b.* from tr_user_role a
		inner join ti_role b on
		a.role_id = b.role_id where a.user_id = #{userId}
	</select>
	<!-- 第二种方法,直接将结果集写在联合的标签内 -->
	<select id="getMulti2" parameterType="int" resultMap="multiUnion2">
		select * from ti_user a inner join
		ti_user_ex b on a.user_id
		= b.user_id
		left join tr_user_role c on c.user_Id = a.user_Id
		left join
		ti_role d on d.role_Id = c.role_id where a.user_id =
		#{userId}
	</select>
	<resultMap type="com.wy.model.User" id="multiUnion2">
		<!-- ti_user表的字段 -->
		<id property="userId" column="user_id" />
		<result property="education" column="education" />
		<!-- 其他关联表字段,可有多个association,返回的类型可不同 -->
		<!-- property:user类中关联其他表的字段,column:user中传给userEx的字段,javaType:查询的返回类型; -->
		<!-- select:另一个查询,fetchType:默认lazy表示延迟记载,表示使用的时候才会使用sql查询.这里的值大于全局设置 -->
		<association property="userEx" column="user_id" javaType="com.wy.model.UserEx"
			fetchType="lazy">
			<id property="userId" column="user_id" />
			<result property="eduaction" column="education" />
		</association>
		<!-- 返回list的结果集 -->
		<collection property="roles" ofType="com.wy.model.Role">
			<!-- 集合的字段 -->
			<id property="roleId" column="role_id" />
			<result property="roleName" column="role_name" />
		</collection>
		<!-- 鉴别器:就是case when,column:需要判断的属性名 -->
		<discriminator javaType="string" column="sex">
			<!-- value:需要进行判断的值,resultMap和resultType必须有一个 -->
			<case value="f" resultType="com.wy.model.Role"></case>
			<case value="m" resultType="com.wy.model.Role"></case>
		</discriminator>
	</resultMap>

	<!-- #的用法更丰富:javaType,jdbcType,mode(存储过程),numericScale,resultMap,typeHandler,jdbcTypeName -->
	<!-- mybatis对null的处理为OTHER类型,而oracle不识别该类型,需要在字段里设置javaType的类型:如下 -->
	<select id="getTest1">
		<!-- jdbcType:如果username字段值为null,则默认给null值,而不是给默认的OTHER类型 -->
		select * from ti_user where username = #{username,jdbcType=NULL}
	</select>

	<!-- 返回值类型:实体类直接写实体类;list写list中的泛型的类型;map可写map -->
	<!-- 若返回类型为Map<String,List<User>>,可在接口上加上注解@MapKey(实体类属性名),xml中仍然写实体类 -->
	<select id="getTest2">
		select * from ti_user where username = #{username}
	</select>
</mapper>